// ุณูุฑูุจุช ุชุญุฏูุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุชุชูุงุดู ูุน ุงููุนุงุฏูุงุช ุงูุฌุฏูุฏุฉ
import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, updateDoc, doc, query, where } from 'firebase/firestore';
import { config } from './firebase-config.mjs';

console.log('๐ ุจุฏุก ุชุญุฏูุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช...');
console.log('===============================');

// ุชููุฆุฉ Firebase
const app = initializeApp(config);
const db = getFirestore(app);

// ุฏุงูุฉ ูุชุญุฏูุซ ุงูุฅุฏุฎุงูุงุช ุงูุดูุฑูุฉ
async function updateMonthlyEntries() {
  console.log('\n๐ ุชุญุฏูุซ ุงูุฅุฏุฎุงูุงุช ุงูุดูุฑูุฉ...');
  
  try {
    // ุฌูุจ ุฌููุน ุงูุฅุฏุฎุงูุงุช ุงูุดูุฑูุฉ
    const entriesRef = collection(db, 'monthly-entries');
    const snapshot = await getDocs(entriesRef);
    
    let updatedCount = 0;
    let skippedCount = 0;
    
    for (const docSnapshot of snapshot.docs) {
      const entry = docSnapshot.data();
      const entryId = docSnapshot.id;
      
      // ุงูุชุญูู ูู ูุฌูุฏ ุงูุญููู ุงูุฌุฏูุฏุฉ
      const hasNewFields = entry.holidays !== undefined && 
                          entry.fridaysAndHolidays !== undefined && 
                          entry.overtimeAfterReference !== undefined && 
                          entry.daysInMonth !== undefined;
      
      if (hasNewFields) {
        console.log(`  โญ๏ธ  ุชู ุชุฎุทู ุงูุฅุฏุฎุงู ${entryId} - ูุญุชูู ุนูู ุงูุญููู ุงูุฌุฏูุฏุฉ ุจุงููุนู`);
        skippedCount++;
        continue;
      }
      
      // ุฅุถุงูุฉ ุงูุญููู ุงูุฌุฏูุฏุฉ ุจุงูููู ุงูุงูุชุฑุงุถูุฉ
      const updateData = {
        holidays: 0,
        fridaysAndHolidays: 0,
        overtimeAfterReference: 0,
        daysInMonth: 31,
        // ุชุญุฏูุซ totals ูุชุดูู ุงูุญููู ุงูุฌุฏูุฏุฉ
        totals: {
          ...entry.totals,
          totalOvertime: 0,
          totalSalary: 0,
          netSalary: entry.totals?.total || 0
        }
      };
      
      await updateDoc(doc(db, 'monthly-entries', entryId), updateData);
      console.log(`  โ ุชู ุชุญุฏูุซ ุงูุฅุฏุฎุงู ${entryId}`);
      updatedCount++;
    }
    
    console.log(`\n๐ ููุฎุต ุชุญุฏูุซ ุงูุฅุฏุฎุงูุงุช ุงูุดูุฑูุฉ:`);
    console.log(`  - ุชู ุชุญุฏูุซ: ${updatedCount} ุฅุฏุฎุงู`);
    console.log(`  - ุชู ุชุฎุทู: ${skippedCount} ุฅุฏุฎุงู`);
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุฅุฏุฎุงูุงุช ุงูุดูุฑูุฉ:', error);
    throw error;
  }
}

// ุฏุงูุฉ ูุชุญุฏูุซ ููุงุนุฏ ุงูุฑูุงุชุจ
async function updateSalaryRules() {
  console.log('\nโ๏ธ  ุชุญุฏูุซ ููุงุนุฏ ุงูุฑูุงุชุจ...');
  
  try {
    const salaryRulesRef = doc(db, 'salaryRules', 'salaryRules');
    
    // ุงูุชุญูู ูู ูุฌูุฏ ููุงุนุฏ ุงูุฑูุงุชุจ
    const snapshot = await getDocs(collection(db, 'salaryRules'));
    
    if (snapshot.empty) {
      console.log('  โน๏ธ  ูุง ุชูุฌุฏ ููุงุนุฏ ุฑูุงุชุจ ููุฌูุฏุฉุ ุณูุชู ุฅูุดุงุคูุง ุนูุฏ ุงูุญุงุฌุฉ');
      return;
    }
    
    // ููุงุนุฏ ุงูุฑูุงุชุจ ุงูุญุงููุฉ ูุง ุชุญุชุงุฌ ุชุญุฏูุซ ูุฃููุง ูุณุชููุฉ ุนู ุงููุนุงุฏูุงุช ุงูุฌุฏูุฏุฉ
    console.log('  โ ููุงุนุฏ ุงูุฑูุงุชุจ ูุง ุชุญุชุงุฌ ุชุญุฏูุซ');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุชุญุฏูุซ ููุงุนุฏ ุงูุฑูุงุชุจ:', error);
    throw error;
  }
}

// ุฏุงูุฉ ูุฅูุดุงุก ููุงุฑุณ ุฌุฏูุฏุฉ
async function createNewIndexes() {
  console.log('\n๐ ุฅูุดุงุก ููุงุฑุณ ุฌุฏูุฏุฉ...');
  
  try {
    // ุงูููุงุฑุณ ุงูุฌุฏูุฏุฉ ุณุชุชู ุฅุถุงูุชูุง ุนุจุฑ firestore.indexes.json
    console.log('  โน๏ธ  ุณูุชู ุชุญุฏูุซ ุงูููุงุฑุณ ุนุจุฑ ููู firestore.indexes.json');
    
    // ูููู ุฅุถุงูุฉ ููุงุฑุณ ุฌุฏูุฏุฉ ููุง ุฅุฐุง ูุฒู ุงูุฃูุฑ
    const newIndexes = [
      {
        collectionGroup: "monthly-entries",
        queryScope: "COLLECTION",
        fields: [
          { fieldPath: "monthKey", order: "ASCENDING" },
          { fieldPath: "regionId", order: "ASCENDING" },
          { fieldPath: "status", order: "ASCENDING" }
        ]
      },
      {
        collectionGroup: "monthly-entries",
        queryScope: "COLLECTION", 
        fields: [
          { fieldPath: "monthKey", order: "ASCENDING" },
          { fieldPath: "holidays", order: "ASCENDING" }
        ]
      }
    ];
    
    console.log('  โ ุชู ุชุญุฏูุฏ ุงูููุงุฑุณ ุงูุฌุฏูุฏุฉ');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูููุงุฑุณ:', error);
    throw error;
  }
}

// ุฏุงูุฉ ุฑุฆูุณูุฉ ูุชุดุบูู ุฌููุน ุงูุชุญุฏูุซุงุช
async function updateDatabase() {
  try {
    console.log('๐ ุจุฏุก ุนูููุฉ ุชุญุฏูุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช...');
    
    // ุชุญุฏูุซ ุงูุฅุฏุฎุงูุงุช ุงูุดูุฑูุฉ
    await updateMonthlyEntries();
    
    // ุชุญุฏูุซ ููุงุนุฏ ุงูุฑูุงุชุจ
    await updateSalaryRules();
    
    // ุฅูุดุงุก ููุงุฑุณ ุฌุฏูุฏุฉ
    await createNewIndexes();
    
    console.log('\n๐ ุชู ุชุญุฏูุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!');
    console.log('================================');
    console.log('โ ุชู ุฅุถุงูุฉ ุงูุญููู ุงูุฌุฏูุฏุฉ:');
    console.log('  - holidays (ุนุฏุฏ ุงูุนุทู)');
    console.log('  - fridaysAndHolidays (ุงูุฌูุน ูุงูุนุทู)');
    console.log('  - overtimeAfterReference (ุงูุฅุถุงูู ุจุนุฏ ุงููุฑุฌุน)');
    console.log('  - daysInMonth (ุฃูุงู ุงูุดูุฑ)');
    console.log('โ ุชู ุชุญุฏูุซ totals ูุชุดูู:');
    console.log('  - totalOvertime (ุฅุฌูุงูู ุงูุฅุถุงูู)');
    console.log('  - totalSalary (ุฅุฌูุงูู ุงูุฑุงุชุจ)');
    console.log('  - netSalary (ุตุงูู ุงูุฑุงุชุจ)');
    
  } catch (error) {
    console.error('\n๐ฅ ูุดู ูู ุชุญุฏูุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    process.exit(1);
  }
}

// ุชุดุบูู ุงูุชุญุฏูุซ
updateDatabase();
