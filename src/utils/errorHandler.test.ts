// ููู ุงุฎุชุจุงุฑ ุจุณูุท ููุธุงู ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
import { errorHandler } from './errorHandler';

// ุงุฎุชุจุงุฑ ูุนุงูุฌ ุงูุฃุฎุทุงุก
export const testErrorHandler = () => {
  console.log('๐งช ุจุฏุก ุงุฎุชุจุงุฑ ูุธุงู ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก...');

  // ุงุฎุชุจุงุฑ 1: ุฎุทุฃ ุจุณูุท
  try {
    throw new Error('ุฎุทุฃ ุชุฌุฑูุจู ููุงุฎุชุจุงุฑ');
  } catch (error) {
    errorHandler.handleError(error, 'testErrorHandler', {
      action: 'test_simple_error',
      additionalData: { testType: 'simple' }
    });
  }

  // ุงุฎุชุจุงุฑ 2: ุฎุทุฃ Firebase
  try {
    const firebaseError = {
      code: 'permission-denied',
      message: 'Permission denied',
      name: 'FirebaseError'
    };
    errorHandler.handleFirebaseError(firebaseError as any, 'testErrorHandler', {
      action: 'test_firebase_error',
      additionalData: { testType: 'firebase' }
    });
  } catch (error) {
    console.log('ุชู ุงุฎุชุจุงุฑ ุฎุทุฃ Firebase');
  }

  // ุงุฎุชุจุงุฑ 3: ุฎุทุฃ ุงูุดุจูุฉ
  try {
    const networkError = new Error('Network request failed');
    networkError.name = 'NetworkError';
    errorHandler.handleNetworkError(networkError, 'testErrorHandler', {
      action: 'test_network_error',
      additionalData: { testType: 'network' }
    });
  } catch (error) {
    console.log('ุชู ุงุฎุชุจุงุฑ ุฎุทุฃ ุงูุดุจูุฉ');
  }

  // ุงุฎุชุจุงุฑ 4: ุฎุทุฃ ุงููุตุงุฏูุฉ
  try {
    const authError = {
      code: 'auth/user-not-found',
      message: 'User not found'
    };
    const userMessage = errorHandler.handleAuthError(authError, 'testErrorHandler');
    console.log('ุฑุณุงูุฉ ุฎุทุฃ ุงููุตุงุฏูุฉ:', userMessage);
  } catch (error) {
    console.log('ุชู ุงุฎุชุจุงุฑ ุฎุทุฃ ุงููุตุงุฏูุฉ');
  }

  // ุงุฎุชุจุงุฑ 5: ุฎุทุฃ Firestore
  try {
    const firestoreError = {
      code: 'permission-denied',
      message: 'Permission denied'
    };
    const userMessage = errorHandler.handleFirestoreError(firestoreError, 'testErrorHandler');
    console.log('ุฑุณุงูุฉ ุฎุทุฃ Firestore:', userMessage);
  } catch (error) {
    console.log('ุชู ุงุฎุชุจุงุฑ ุฎุทุฃ Firestore');
  }

  // ุนุฑุถ ุงูุชูุงุฑูุฑ
  const reports = errorHandler.getErrorReports();
  console.log(`๐ ุฅุฌูุงูู ุชูุงุฑูุฑ ุงูุฃุฎุทุงุก: ${reports.length}`);
  
  reports.forEach((report, index) => {
    console.log(`๐ ุชูุฑูุฑ ${index + 1}:`, {
      id: report.id,
      message: report.message,
      severity: report.severity,
      component: report.context.component,
      action: report.context.action
    });
  });

  console.log('โ ุงูุชูุงุก ุงุฎุชุจุงุฑ ูุธุงู ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก');
};

// ุชุดุบูู ุงูุงุฎุชุจุงุฑ ุฅุฐุง ูุงู ูู ูุถุน ุงูุชุทููุฑ
if (process.env.NODE_ENV === 'development') {
  // ูููู ุฅุถุงูุฉ ูุฐุง ุฅูู console ููุงุฎุชุจุงุฑ
  (window as any).testErrorHandler = testErrorHandler;
  console.log('๐ก ููููู ุชุดุบูู testErrorHandler() ูู console ููุงุฎุชุจุงุฑ');
}
