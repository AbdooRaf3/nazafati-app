rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role-based access control
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserData().role == 'admin';
    }
    
    function isSupervisor() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserData().role == 'supervisor';
    }
    
    function isEntryForOwnRegionFromRequest() {
      return isSupervisor() && 
        exists(/databases/$(database)/documents/employees/$(request.resource.data.employeeId)) &&
        get(/databases/$(database)/documents/employees/$(request.resource.data.employeeId)).data.regionId == getUserData().regionId;
    }
    
    function isEmployeeInOwnRegion(employeeId) {
      return isSupervisor() && 
        exists(/databases/$(database)/documents/employees/$(employeeId)) &&
        get(/databases/$(database)/documents/employees/$(employeeId)).data.regionId == getUserData().regionId;
    }
    
    function isFinance() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserData().role == 'finance';
    }
    
    // Users collection rules
    match /users/{userId} {
      // Only admins can create/update/delete users
      // Everyone can read their own user document
      allow create, update, delete: if isAdmin();
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
    }
    
    // Employees collection rules
    match /employees/{employeeId} {
      // Admins and Finance can read all employees
      // Supervisors can only read employees in their region
      allow read: if isAdmin() || isFinance() || isEmployeeInOwnRegion(employeeId);
      
      // Admins can do everything
      allow write: if isAdmin();
      
      // Supervisors can create/update/delete employees in their region only
      allow create, update, delete: if isSupervisor() && 
        request.resource.data.regionId == getUserData().regionId;
    }
    
    // Monthly entries collection rules
    match /monthly-entries/{entryId} {
      // Admins and Finance can read all entries
      // Supervisors can only read entries for employees in their region
      allow read: if isAdmin() || isFinance() || 
        (isSupervisor() && isEmployeeInOwnRegion(resource.data.employeeId));
      
      // Admins can do everything
      allow write: if isAdmin();
      
      // Supervisors can create/update/delete entries for employees in their region
      allow create, update, delete: if isSupervisor() && 
        isEntryForOwnRegionFromRequest();
    }
    
    // Salary rules collection
    match /salaryRules/{ruleId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Regions collection
    match /regions/{regionId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}
