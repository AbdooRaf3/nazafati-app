rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role-based access control
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserData().role == 'admin';
    }
    
    function isSupervisor() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserData().role == 'supervisor';
    }
    
    function isEntryForOwnRegion(entryData) {
      return isSupervisor() && 
        exists(/databases/$(database)/documents/employees/$(entryData.employeeId)) &&
        get(/databases/$(database)/documents/employees/$(entryData.employeeId)).data.regionId == getUserData().regionId;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Only admins can create/update/delete users
      // Everyone can read their own user document
      allow create, update, delete: if isAdmin();
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
    }
    
    // Employees collection rules
    match /employees/{employeeId} {
      // Allow read access for all authenticated users during development
      allow read: if isAuthenticated();
      
      // Admins can do everything
      allow write: if isAdmin();
      
      // Supervisors can create/update/delete employees in their region
      allow create, update, delete: if isSupervisor() && 
        request.resource.data.regionId == getUserData().regionId;
    }
    
    // Monthly entries collection rules
    match /monthlyEntries/{entryId} {
      // Allow read access for all authenticated users during development
      allow read: if isAuthenticated();
      
      // Admins can do everything
      allow write: if isAdmin();
      
      // Supervisors can create/update/delete entries for employees in their region
      allow create, update, delete: if isSupervisor() && 
        isEntryForOwnRegion(request.resource.data);
    }
    
    // Salary rules collection
    match /salaryRules/{ruleId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Regions collection
    match /regions/{regionId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}
